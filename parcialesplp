%prolog file

arbolConSubconjuntos(_,nil).
arbolConSubconjuntos(Lista,bin(X,Y,Z)) :- arbolConSubconjuntos(Lista,X), arbolConSubconjuntos(Lista,Z), subconjunto(Lista,[],Y). 

subconjunto(Lista,YaPuestos,[X]):- member(X,Lista), not(member(X,YaPuestos)).
subconjunto(Lista,YaPuestos,[X|Xs]) :- member(X,Lista), not(member(X,YaPuestos)), subconjunto(Lista,[X|YaPuestos],Xs).








desde(X,X).
desde(X,Y) :- N is X+1, desde(N,Y).







esTriangulo(tri(A,B,C)) :- esCompatible(A,B,C), esCompatible(B,A,C), esCompatible(C,A,B).

esCompatible(A,B,C) :- abs(B+C,H), abs(B-C,L), between(L,H,A).



perimetro(tri(A,B,C),P) :- esTriangulo(tri(A,B,C)), abs(A+B+C,P). 


triangulo(tri(A,B,C)) :- esTriangulo(tri(A,B,C)).


quicksort([],[]).
quicksort([X|Xs],L1) :- cortarSegun(X,Xs,Menores,Mayores), quicksort(Menores,MenoresOrd), quicksort(Mayores,MayoresOrd), append(MenoresOrd,[X|MayoresOrd],L1).

cortarSegun(_,[],[],[]).
cortarSegun(Pivote,[X|Xs],[X|L1],L2) :- Pivote >= X, cortarSegun(Pivote,Xs,L1,L2).
cortarSegun(Pivote,[X|Xs],L1,[X|L2]) :- Pivote < X, cortarSegun(Pivote,Xs,L1,L2).

corteMasParejo([],[],[]).
corteMasParejo([X|Xs],L1,L2) :- cortes([X|Xs],L1,L2), not(hayCorteMejor([X|Xs],L1,L2)).

hayCorteMejor([X|Xs],L1,L2) :- cortes([X|Xs],PrimerZopeda,SegundoZopeda), sum(PrimerZopeda,H1), sum(SegundoZopeda,H2), abs(H1-H2,N1), sum(L1,F1), sum(L2,F2), abs(F1-F2,N2), N2 > N1.

cortes(Lista,L1,L2) :- append(L1,L2,Lista).

sum([],0).
sum([X|Xs],N) :- sum(Xs,Nm1), N is Nm1+X.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pintor(da_vinci)
pintor(te_vincha)
pinto(da_vinci, mona_lisa)
pinto(te_vincha, mona_pizza)
pinto(da_vinci,isabella_deste)
pinto(te_vincha,isabella_ester)
esPlagio(mona_pizza,mona_lisa)
esPlagio(isabella_ester,isabella_deste)
not(plagiador(te_vincha))                            


not(\exist p1 pinto(te_vincha,p1) ^ \exist a2 \exist p2 pinto(a2,p2) ^ esPlagio(p1,p2))     

not(\exist p1 pinto(te_vincha,p1)) or not(\exist a2 p2 pinto(a2,p2) ^ esPlagio(p1,p2))       **De morgan**

\forall p1 not(pinto(te_vincha,p1)) or \forall a2 p2 not(pinto(a2,p2) ^ esPlagio(p1,p2))     

\forall p1 not(pinto(te_vincha,p1)) or \forall a2 p2( (not(pinto(a2,p2))) or (not(esPlagio(p1,p2))))

{not(pinto(te_vincha,p1)), not(pinto(a2,p2)), not(esPlagio(p1,p2))}




1) pintor(da_vinci)
2) pinto(da_vinci, mona_lisa)
3) pintor(te_vincha)
4) pinto(te_vincha, mona_pizza)
5) pinto(da_vinci,isabella_deste)
6) pinto(te_vincha,isabella_ester)
7) esPlagio(mona_pizza,mona_lisa)
8) esPlagio(isabella_ester,isabella_deste)
9) not(pinto(te_vincha,p1)), not(pinto(a2,p2)), not(esPlagio(p1,p2))

9,4 -> 10) not(pinto(a2,p2)), not(esPlagio(mona_pizza,p2))            mgu(p1 = mona_pizza)
10,2 -> 11) not(esPlagio(mona_pizza,mona_lisa))                       mgu(a2 = da_vinci, p2= mona_lisa)
11,7 -> 12) cuadradito :)  

chamuyo a lo pape:
La resolucion es SLD porque es lineal y porque empece por la unica clausula que no tiene un literal positivo.

entonces not(plagiador(te_vincha)) se contradice con todas las otras formulas. Luego plagiador(te_vincha) es verdadero.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5






     TRUE                                TRUE                                                
__________________________    ____________________________________     T-NatInt ________   ________________ T-Zero
{d:Dicc(Nat,Int)}|> 0 :Nat   {d:Dicc(Nat,Int)} |> d:Dicc(Nat,Int)}              Nat<:Int   {} |> 0:Nat      TRUE                 TRUE                   
____________________________________________________________________   T-Obtener     ____________  ______________   ______________________________  T-Vacio
{d:Dicc(Nat,Int)} |> obtener 0 d : Int                                                {} |> 0:Int  Vacio |>-2:Int  Vacio(Int,Int) : Dicc(Int,Int)  
____________________________________________________________________  T-Abs   ___ _______________________________________________________________   T-Definir
{} |> (lambda d Dicc(Nat,Int).obtener 0 d) : Dicc(Nat,Int) -> Int              {}|> (definir 0 -2 Vacio(Int,Int)) :Dicc(Int,Int) 
___________________________________________________________________________________________________________________   T-APP
{} |> (lambda d Dicc(Nat,Int).obtener 0 d) (definir 0 -2 Vacio(Int,Int)) : Int


